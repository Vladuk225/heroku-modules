# meta developer: @Vladislav_225
from telethon.tl.custom import Button
from telethon import events
import asyncio
import random
from .. import utils, loader


@loader.tds
class GlyphBonusMod(loader.Module):
    """–§–∞—Ä–º –≤ –±–æ—Ç–µ @GlyphGame_bot"""

    strings = {"name": "GlyphFarm"}

    def __init__(self):
        self.farming_enabled = False
        self.task = None

    async def client_ready(self, client, db):
        self.client = client

    async def glyphcmd(self, message):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Ä—É—á–Ω—É—é: .glyph"""
        await self.send_bonus(message)

    async def glyph_farm_oncmd(self, message):
        """–í–∫–ª—é—á–∏—Ç—å –∑–∞–±–∏—Ä–∞–Ω–∏—è –±–æ–Ω—É—Å–∞ –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞."""
        if self.farming_enabled:
            await message.edit("üîÑ –ê–≤—Ç–æ–∫–ª–∏–∫ –±–æ–Ω—É—Å–∞ —É–∂–µ –≤–∫–ª—é—á—ë–Ω.")
            return
        self.farming_enabled = True
        self.task = asyncio.create_task(self.auto_glyph_loop())
        await message.edit("‚úÖ –ê–≤—Ç–æ–∫–ª–∏–∫ –±–æ–Ω—É—Å–∞ –≤–∫–ª—é—á—ë–Ω. –ö–∞–∂–¥—ã–µ 24 —á–∞—Å–∞.")

    async def glyph_farm_offcmd(self, message):
        """–í—ã–∫–ª—é—á–∏—Ç—å –∑–∞–±–∏—Ä–∞–Ω–∏—è –±–æ–Ω—É—Å–∞."""
        if not self.farming_enabled:
            await message.edit("‚õîÔ∏è –ê–≤—Ç–æ–∫–ª–∏–∫ –±–æ–Ω—É—Å–∞ —É–∂–µ –≤—ã–∫–ª—é—á–µ–Ω.")
            return
        self.farming_enabled = False
        if self.task:
            self.task.cancel()
            self.task = None
        await message.edit("‚ùå –ê–≤—Ç–æ–∫–ª–∏–∫ –±–æ–Ω—É—Å–∞ –≤—ã–∫–ª—é—á—ë–Ω.")

    async def auto_glyph_loop(self):
        while self.farming_enabled:
            try:
                await self.send_bonus()
            except Exception as e:
                print(f"[GlyphBonus] –û—à–∏–±–∫–∞: {e}")
            await asyncio.sleep(86400)  # 24 —á–∞—Å–∞ = 86400 —Å–µ–∫—É–Ω–¥

    async def send_bonus(self, manual_message=None):
        bot_username = "@GlyphGame_bot"

        if manual_message:
            await manual_message.edit(f"üîÑ –ó–∞–±–∏—Ä–∞—é –±–æ–Ω—É—Å...")
        else:
            await self.client.send_message("me", "ü§ñ –ü—Ä–æ—à–ª–æ 24 —á–∞—Å–∞, –∑–∞–±–∏—Ä–∞—é –±–æ–Ω—É—Å...")

        msg = await self.client.send_message(bot_username, "–±–æ–Ω—É—Å")

        try:
            response = await self.client.wait_event(
                events.NewMessage(
                    from_users=bot_username,
                    chats=bot_username,
                    incoming=True
                ),
                timeout=15
            )
        except asyncio.TimeoutError:
            if manual_message:
                await manual_message.edit("‚õîÔ∏è –ë–æ—Ç –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª.")
            else:
                await self.client.send_message("me", "‚õîÔ∏è –ë–æ—Ç –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª.")
            return

        if not response.buttons:
            if manual_message:
                await manual_message.edit("‚ùå –ù–µ—Ç –∫–Ω–æ–ø–æ–∫.")
            else:
                await self.client.send_message("me", "‚ùå –ù–µ—Ç –∫–Ω–æ–ø–æ–∫.")
            return

        buttons = sum(response.buttons, [])
        if len(buttons) < 3:
            if manual_message:
                await manual_message.edit("‚ö†Ô∏è –ú–µ–Ω—å—à–µ —Ç—Ä—ë—Ö –∫–Ω–æ–ø–æ–∫.")
            else:
                await self.client.send_message("me", "‚ö†Ô∏è –ú–µ–Ω—å—à–µ —Ç—Ä—ë—Ö –∫–Ω–æ–ø–æ–∫.")
            return

        choice = random.choice(buttons[:3])
        await response.click(data=choice.data if choice.data else None)

        text = f"‚úÖ –ù–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É: {choice.text}"
        if manual_message:
            await manual_message.edit(text)
        else:
            await self.client.send_message("me", text)
